{
  "name": "pymakr",
  "displayName": "PyMakr",
  "publisher": "Pycom",
  "description": "",
  "version": "2.0.0-alpha.0",
  "engines": {
    "vscode": "^1.62.0"
  },
  "categories": [
    "Other"
  ],
  "repository": {
    "url": "https://github.com/jakobrosenberg/pymakr"
  },
  "activationEvents": [
    "*"
  ],
  "main": "./extension.js",

  "contributes": {
    "configuration": {
      "title": "PyMakr",
      "properties": {
        "pymakr.logLevel": {
          "type": "string",
          "default": "info",
          "enum": [
            "fatal",
            "error",
            "warn",
            "info",
            "debugShort",
            "debug",
            "traceShort",
            "trace"
          ],
          "enumDescriptions": [
            "Plugin breaking errors",
            "Errors",
            "Warnings",
            "General plugin information",
            "Short debug messages",
            "Long debug messages",
            "Trace without stacktrace",
            "Trace with stacktrace"
          ],
          "description": "Defaults to 'info'. Logs can be read in the developer tools (ctrl + shift i)."
        },
        "pymakr.logFilter": {
          "type": "string",
          "description": "Regular expression. If not empty, only logs matching the filter will be displayed.",
          "examples": [
            ".*terminal.*"
          ]
        },
        "pymakr.advancedMode": {
          "type": "boolean",
          "default": false,
          "description": "Prompts on actions instead of using defaults."
        },
        "pymakr.autoConnect": {
          "type": "string",
          "enum": [
            "always",
            "never",
            "onLostConnection",
            "lastState"
          ],
          "enumDescriptions": [
            "Always auto connect to devices.",
            "Never auto connect to devices.",
            "Only auto connect to devices if connection was previously lost.",
            "Auto connect to devices that were never manually disconnected."
          ],
          "default": "onLostConnection",
          "description": "When to connect devices automatically. Setting can be superseded on device level, by right clicking the device and selecting 'config'."
        }
      }
    },
    "jsonValidation": [
      {
        "fileMatch": "pymakr.conf",
        "url": "./pymakr.schema.json"
      }
    ],
    "languages": [
      {
        "id": "json",
        "filenamePatterns": [
          "pymakr.conf"
        ]
      }
    ],
    "terminal": {
      "profiles": [
        {
          "id": "pymakr.terminal-profile",
          "title": "PyMakr"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "pymakr",
          "title": "PyMakr",
          "icon": "media/pycom.svg"
        }
      ]
    },
    "views": {
      "pymakr": [
        {
          "id": "pymakr-projects-tree",
          "name": "Projects",
          "icon": "media/dep.svg",
          "contextualTitle": "Projects"
        },
        {
          "id": "pymakr-devices-tree",
          "name": "Devices",
          "icon": "media/dep.svg",
          "contextualTitle": "Devices"
        }
      ],
      "explorer": [
        {
          "id": "jsonOutline",
          "name": "Json Outline",
          "when": "jsonOutlineEnabled"
        },
        {
          "id": "ftpExplorer",
          "name": "FTP Explorer"
        },
        {
          "id": "fileExplorer",
          "name": "File Explorer"
        },
        {
          "id": "testView",
          "name": "Test View"
        },
        {
          "id": "testViewDragAndDrop",
          "name": "Test View Drag and Drop"
        }
      ]
    },
    "commands": [
      {
        "command": "pymakr.configureDevice",
        "title": "Configure device"
      },
      {
        "command": "pymakr.connect",
        "title": "Connect device",
        "icon": "$(zap)"
      },
      {
        "command": "pymakr.addDeviceToFileExplorer",
        "title": "Open device in file explorer",
        "icon": "$(folder)"
      },
      {
        "command": "pymakr.newDevice",
        "title": "Add a new device",
        "icon": "$(plus)"
      },
      {
        "command": "pymakr.createTerminal",
        "title": "Create terminal",
        "icon": "$(terminal-view-icon)"
      },
      {
        "command": "pymakr.disconnect",
        "title": "Disconnect device"
      },
      {
        "command": "pymakr.downloadProject",
        "shortTitle": "Download",
        "title": "Download project from device",
        "icon": "$(cloud-download)"
      },
      {
        "command": "pymakr.uploadProject",
        "shortTitle": "Upload",
        "title": "Upload project to device",
        "icon": "$(cloud-upload)"
      },
      {
        "command": "pymakr.setActiveProject",
        "title": "Set project"
      },
      {
        "command": "pymakr.setActiveDevice",
        "title": "Set active device"
      },
      {
        "command": "pymakr.addDeviceToProject",
        "shortTitle": "$(plus)device",
        "title": "Add device to project"
      },
      {
        "command": "pymakr.removeDeviceFromProject",
        "title": "Remove device from project",
        "shortTitle": "Remove device"
      },
      {
        "command": "pymakr.upload",
        "title": "Upload to device"
      },
      {
        "command": "pymakr.download",
        "title": "Pymakr > Download project"
      },
      {
        "command": "pymakr.runEditor",
        "title": "Run on device",
        "shortTitle": "Run"
      },
      {
        "command": "pymakr.runFile",
        "title": "Run file on device",
        "shortTitle": "Run"
      },
      {
        "command": "pymakr.toggleAdvancedMode",
        "title": "Toggle advanced mode"
      },
      {
        "command": "pymakr.projectSettings",
        "title": "Pymakr > Project settings"
      },
      {
        "command": "pymakr.globalSettings",
        "title": "Pymakr > Global settings"
      },
      {
        "command": "pymakr.extra.getVersion",
        "title": "Pymakr > Extra's > Get firmware version"
      },
      {
        "command": "pymakr.extra.getWifiMac",
        "title": "Pymakr > Extra's > Get WiFi AP SSID"
      },
      {
        "command": "pymakr.extra.getSerial",
        "title": "Pymakr > Extra's > List serial ports"
      },
      {
        "command": "pymakr.help",
        "title": "Pymakr > Help"
      },
      {
        "command": "pymakr.listCommands",
        "title": "Pymakr > List all Commands"
      }
    ],
    "keybindings": [
      {
        "command": "",
        "key": "ctrl+e",
        "when": "terminalFocus"
      },
      {
        "command": "pymakr.createTerminal",
        "key": "ctrl+shift+c",
        "mac": "cmd+shift+c"
      },
      {
        "command": "pymakr.upload",
        "key": "ctrl+shift+s",
        "mac": "cmd+shift+s"
      },
      {
        "command": "pymakr.uploadFile",
        "key": "ctrl+shift+s",
        "mac": "ctrl+shift+s"
      },
      {
        "command": "pymakr.runEditor",
        "key": "ctrl+shift+r",
        "mac": "cmd+shift+r"
      },
      {
        "command": "pymakr.globalSettings",
        "key": "ctrl+shift+g",
        "mac": "cmd+shift+g"
      }
    ],
    "submenus": [
      {
        "id": "pymakr.projectDeviceMenu",
        "icon": "$(ellipsis)",
        "label": "device"
      },
      {
        "id": "pymakr.editorContextMenu",
        "label": "pymakr"
      },
      {
        "id": "pymakr.explorerContextMenu",
        "label": "pymakr"
      }
    ],
    "menus": {
      "pymakr.projectDeviceMenu": [
        {
          "command": "pymakr.removeDeviceFromProject",
          "when": "viewItem == connectedProjectDevice"
        },
        {
          "command": "pymakr.disconnect"
        },
        {
          "command": "pymakr.configureDevice"
        }
      ],
      "pymakr.editorContextMenu": [
        {
          "command": "pymakr.runEditor",
          "group": "pymakr"
        },
        {
          "command": "pymakr.upload",
          "group": "pymakr"
        }
      ],
      "pymakr.explorerContextMenu": [
        {
          "command": "pymakr.runFile",
          "group": "pymakr"
        },
        {
          "command": "pymakr.upload",
          "group": "pymakr"
        }
      ],
      "view/item/context": [
        {
          "command": "pymakr.addDeviceToFileExplorer",
          "group": "inline@10",
          "when": "viewItem == connectedDevice || viewItem == connectedProjectDevice"
        },
        {
          "command": "pymakr.addDeviceToProject",
          "group": "inline",
          "when": "viewItem == project"
        },
        {
          "command": "pymakr.downloadProject",
          "when": "viewItem == connectedProjectDevice",
          "group": "inline@8"
        },
        {
          "command": "pymakr.uploadProject",
          "when": "viewItem == connectedProjectDevice",
          "group": "inline@6"
        },
        {
          "command": "pymakr.createTerminal",
          "when": "viewItem == connectedDevice || viewItem == connectedProjectDevice",
          "group": "inline"
        },
        {
          "command": "pymakr.connect",
          "when": "viewItem == device || viewItem == projectDevice",
          "group": "inline"
        },
        {
          "submenu": "pymakr.projectDeviceMenu",
          "group": "inline@100",
          "when": "viewItem == connectedProjectDevice || viewItem == connectedDevice"
        }
      ],
      "view/title": [
        {
          "command": "pymakr.newDevice",
          "when": "view == pymakr-devices-tree",
          "group": "navigation"
        }
      ],
      "explorer/context": [
        {
          "submenu": "pymakr.explorerContextMenu"
        }
      ],
      "editor/context": [
        {
          "submenu": "pymakr.editorContextMenu"
        }
      ],
      "editor/title": [
        {
          "submenu": "pymakr.editorContextMenu"
        }
      ]
    }
  },
  "scripts": {
    "lint": "eslint .",
    "pretest": "npm run lint",
    "test": "node ./test/runTest.js",
    "mctl": "mctl",
    "test:unit": "probs src",
    "test-watch:unit": "npx nodemon --exec npm run test:unit",
    "semantic-release": "semantic-release"
  },
  "devDependencies": {
    "@types/glob": "^7.2.0",
    "@types/mocha": "^9.0.0",
    "@types/node": "16.x",
    "@types/vscode": "^1.63.1",
    "@vscode/test-electron": "^2.0.3",
    "eslint": "^8.1.0",
    "glob": "^7.1.7",
    "mocha": "^9.1.3",
    "probs": "^1.0.0-3",
    "semantic-release": "^19.0.2",
    "semantic-release-vsce": "^5.0.8",
    "typescript": "^4.4.4"
  },
  "dependencies": {
    "@serialport/bindings": "^10.0.1",
    "cheap-watch": "^1.0.4",
    "consolite": "^0.3.3",
    "micropython-ctl-cont": "^1.13.8",
    "prompts": "^2.4.2",
    "serialport": "^10.2.2"
  }
}
